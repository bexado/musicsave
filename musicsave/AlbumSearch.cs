using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using SpotifyExplode;
using SpotifyExplode.Search;

namespace MusicSave
{
    public class AlbumSearch
    {
        private readonly SpotifyClient _spotify;
        private readonly ITelegramBotClient _botClient;

        public AlbumSearch(SpotifyClient spotify, ITelegramBotClient botClient)
        {
            _spotify = spotify;
            _botClient = botClient;
        }

        public async Task SearchAlbumAndCreateButtons(long chatId, string albumName, int page = 0, int? messageId = null)
        {
            try
            {
                Console.WriteLine($"–ü–æ–∏—Å–∫ –∞–ª—å–±–æ–º–∞: {albumName}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}");

                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–ª—å–±–æ–º–∞
                string searchQuery = $"album:\"{albumName?.Trim()}\"";
                Console.WriteLine($"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {searchQuery}");

                var searchResults = await _spotify.Search.GetResultsAsync(searchQuery);
                Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {searchResults?.Count() ?? 0}");

                var uniqueAlbums = new Dictionary<string, (string albumName, string artistName, string albumId)>();

                foreach (var result in searchResults)
                {
                    Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–∏–ø–∞: {result.GetType().Name}");
                    if (result is TrackSearchResult track && track.Album != null)
                    {
                        var albumId = track.Album.Id;
                        var artistName = string.Join(", ", track.Artists.Select(a => a.Name));
                        
                        if (!uniqueAlbums.ContainsKey(albumId))
                        {
                            Console.WriteLine($"–î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º: {track.Album.Name} –æ—Ç {artistName}");
                            uniqueAlbums[albumId] = (track.Album.Name, artistName, albumId);
                        }
                    }
                }

                var allAlbumResults = uniqueAlbums.Values.ToList();
                Console.WriteLine($"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤: {allAlbumResults.Count}");

                if (allAlbumResults.Count == 0)
                {
                    await _botClient.SendTextMessageAsync(chatId,
                        $"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–ª—å–±–æ–º–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{albumName}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.");
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                var albumsPerPage = 10;
                var skip = page * albumsPerPage;
                var currentPageAlbums = allAlbumResults.Skip(skip).Take(albumsPerPage).ToList();
                Console.WriteLine($"–ê–ª—å–±–æ–º–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {currentPageAlbums.Count}");

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
                var buttons = new List<InlineKeyboardButton[]>();
                foreach (var album in currentPageAlbums)
                {
                    var buttonText = $"{album.artistName} - {album.albumName}";
                    if (buttonText.Length > 64)
                    {
                        buttonText = buttonText.Substring(0, 61) + "...";
                    }
                    Console.WriteLine($"–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: {buttonText}");
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData(buttonText, $"album_{album.albumId}")
                    });
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                var navigationButtons = new List<InlineKeyboardButton>();

                if (page > 0)
                {
                    navigationButtons.Add(InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", $"albumpage_{page - 1}_{albumName}"));
                }

                if (skip + albumsPerPage < allAlbumResults.Count)
                {
                    navigationButtons.Add(InlineKeyboardButton.WithCallbackData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", $"albumpage_{page + 1}_{albumName}"));
                }

                if (navigationButtons.Any())
                {
                    buttons.Add(navigationButtons.ToArray());
                }

                var inlineKeyboard = new InlineKeyboardMarkup(buttons);
                string messageText = $"–ù–∞–π–¥–µ–Ω–æ {allAlbumResults.Count} –∞–ª—å–±–æ–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{albumName}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):";

                Console.WriteLine($"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {messageText}");
                Console.WriteLine($"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: {buttons.Count}");

                try
                {
                    if (messageId.HasValue)
                    {
                        Console.WriteLine($"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {messageId.Value}");
                        await _botClient.EditMessageTextAsync(
                            chatId,
                            messageId.Value,
                            messageText,
                            replyMarkup: inlineKeyboard
                        );
                    }
                    else
                    {
                        Console.WriteLine("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                        await _botClient.SendTextMessageAsync(
                            chatId,
                            messageText,
                            replyMarkup: inlineKeyboard
                        );
                    }
                    Console.WriteLine("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                    throw;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å–±–æ–º–∞: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                await _botClient.SendTextMessageAsync(chatId,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.");
            }
        }

        public async Task ShowAlbumTracks(long chatId, string albumId)
        {
            try
            {
                Console.WriteLine($"–ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∞–ª—å–±–æ–º–∞ {albumId}");
                var album = await _spotify.Albums.GetAsync(albumId);
                var tracks = await _spotify.Albums.GetAllTracksAsync(albumId);

                if (tracks == null || !tracks.Any())
                {
                    await _botClient.SendTextMessageAsync(chatId, "–í —ç—Ç–æ–º –∞–ª—å–±–æ–º–µ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.");
                    return;
                }

                var buttons = new List<InlineKeyboardButton[]>();
                foreach (var track in tracks)
                {
                    var buttonText = $"{string.Join(", ", track.Artists.Select(a => a.Name))} - {track.Title}";
                    if (buttonText.Length > 64)
                    {
                        buttonText = buttonText.Substring(0, 61) + "...";
                    }
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData(buttonText, $"track_{track.Id}")
                    });
                }

                var inlineKeyboard = new InlineKeyboardMarkup(buttons);
                var albumArtists = string.Join(", ", album.Artists.Select(a => a.Name));
                var messageText = $"üéµ –ê–ª—å–±–æ–º: {album.Name}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {albumArtists}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:";

                // –ü–æ–ª—É—á–∞–µ–º URL –æ–±–ª–æ–∂–∫–∏ –∞–ª—å–±–æ–º–∞
                var albumCover = album.Images.OrderByDescending(i => i.Height).FirstOrDefault()?.Url;
                
                if (!string.IsNullOrEmpty(albumCover))
                {
                    Console.WriteLine($"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–æ–∂–∫–æ–π: {albumCover}");
                    var inputFile = new InputFileUrl(albumCover);
                    await _botClient.SendPhotoAsync(
                        chatId: chatId,
                        photo: inputFile,
                        caption: messageText,
                        replyMarkup: inlineKeyboard
                    );
                }
                else
                {
                    Console.WriteLine("–û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±–ª–æ–∂–∫–∏");
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: messageText,
                        replyMarkup: inlineKeyboard
                    );
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ –∞–ª—å–±–æ–º–∞: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                await _botClient.SendTextMessageAsync(chatId, 
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ –∞–ª—å–±–æ–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }
    }
}
